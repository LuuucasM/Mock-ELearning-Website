# Generated by Django 3.2.3 on 2021-07-31 02:12

import api.models.profile
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='email')),
                ('company_name', models.CharField(max_length=30)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('user_type', models.CharField(choices=[('ENTRE', 'Entrepreneur'), ('INVES', 'Investor'), ('INSTR', 'Instructor')], max_length=5)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.URLField()),
                ('mark_visible', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('edit_date', models.DateTimeField(blank=True)),
                ('content', models.TextField()),
                ('likes', models.IntegerField(default=0)),
                ('hash_tags', models.TextField(blank=True)),
                ('parent_model_id', models.IntegerField()),
                ('parent_model_type', models.CharField(max_length=120)),
                ('parent_comment_id', models.IntegerField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=1000)),
                ('answer', models.CharField(max_length=10000)),
            ],
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.URLField()),
                ('notes', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='LikesRel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='mtm', to='api.comment')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('edit_date', models.DateTimeField(blank=True)),
                ('content', models.TextField()),
                ('likes', models.IntegerField(default=0)),
                ('hash_tags', models.TextField(blank=True)),
                ('allow_comments', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserFollowing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('following_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='api.user')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='api.user')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=200)),
                ('socials_link', models.CharField(default=api.models.profile.get_random_string_func, max_length=32, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Social link must be Alphanumeric', regex='^[a-zA-Z0-9]*$')])),
                ('username', models.CharField(blank=True, max_length=200)),
                ('comments', models.ManyToManyField(related_name='comments', to='api.Comment')),
                ('likes', models.ManyToManyField(related_name='likes', to='api.LikesRel')),
                ('network', models.ManyToManyField(related_name='_api_profile_network_+', to='api.Profile')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='api.user')),
                ('posts', models.ManyToManyField(related_name='posts', to='api.Post')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='profile_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile'),
        ),
        migrations.CreateModel(
            name='ModuleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('ASN', 'Assignment'), ('LEC', 'Lecture')], max_length=3)),
                ('date', models.DateField()),
                ('assignment', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.assignment')),
                ('discussion', models.ManyToManyField(to='api.Discussion')),
                ('lecture', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.lecture')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
                ('items', models.ManyToManyField(to='api.ModuleItem')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.FloatField(default=0)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user')),
            ],
        ),
        migrations.AddField(
            model_name='likesrel',
            name='post_id',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='mtm', to='api.post'),
        ),
        migrations.AddField(
            model_name='likesrel',
            name='profile_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mtm', to='api.profile'),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(blank=True, max_length=30, null=True)),
                ('course_name', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('semester', models.CharField(blank=True, max_length=100, null=True)),
                ('password', models.CharField(max_length=100)),
                ('enrolled_students', models.ManyToManyField(to='api.User')),
                ('modules', models.ManyToManyField(to='api.Module')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='professor', to='api.user')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='profile_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='marks',
            field=models.ManyToManyField(to='api.Mark'),
        ),
        migrations.AddConstraint(
            model_name='userfollowing',
            constraint=models.UniqueConstraint(fields=('user_id', 'following_user_id'), name='unique_followers'),
        ),
    ]
